{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red24\green24\blue23;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12157\c11765;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Install Xcode from: https://developer.apple.com/xcode/\
2. Open a terminal and type in git, you should see options for git functions. Apple ships a binary package of Git with\'a0Xcode, so if you have Xcode then no need to install Git separately.\
3. Following are usage commands:\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0[-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0[--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0[--super-prefix=<path>] [--config-env=<name>=<envvar>]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0<command> [<args>]\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 These are common Git commands used in various situations:\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 start a working area (see also: git help tutorial)\
\'a0 \'a0clone \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Clone a repository into a new directory\
\'a0 \'a0init \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Create an empty Git repository or reinitialize an existing one\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 work on the current change (see also: git help everyday)\
\'a0 \'a0add \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Add file contents to the index\
\'a0 \'a0mv \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Move or rename a file, a directory, or a symlink\
\'a0 \'a0restore \'a0 \'a0 \'a0 \'a0 \'a0 Restore working tree files\
\'a0 \'a0rm \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Remove files from the working tree and from the index\
\'a0 \'a0sparse-checkout \'a0 Initialize and modify the sparse-checkout\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 examine the history and state (see also: git help revisions)\
\'a0 \'a0bisect \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Use binary search to find the commit that introduced a bug\
\'a0 \'a0diff \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Show changes between commits, commit and working tree, etc\
\'a0 \'a0grep \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Print lines matching a pattern\
\'a0 \'a0log \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Show commit logs\
\'a0 \'a0show \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Show various types of objects\
\'a0 \'a0status \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Show the working tree status\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 grow, mark and tweak your common history\
\'a0 \'a0branch \'a0 \'a0 \'a0 \'a0 \'a0 \'a0List, create, or delete branches\
\'a0 \'a0commit \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Record changes to the repository\
\'a0 \'a0merge \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Join two or more development histories together\
\'a0 \'a0rebase \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Reapply commits on top of another base tip\
\'a0 \'a0reset \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Reset current HEAD to the specified state\
\'a0 \'a0switch \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Switch branches\
\'a0 \'a0tag \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Create, list, delete or verify a tag object signed with GPG\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 collaborate (see also: git help workflows)\
\'a0 \'a0fetch \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 Download objects and refs from another repository\
\'a0 \'a0pull \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Fetch from and integrate with another repository or a local branch\
\'a0 \'a0push \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Update remote refs along with associated objects\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Create Personal Access Token on GitHub\
From your GitHub account, go to\'a0Settings\'a0=>\'a0Developer Settings\'a0=>\'a0Personal Access Token\'a0=>\'a0Generate New Token\'a0(Give your password) =>\'a0Fillup the form\'a0=> click\'a0Generate token\'a0=>\'a0Copy the generated Token, it will be something like\'a0ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Open Terminal.app\
"cd" to directory\
Initiate a git repository\
git init .\
Add existing files\
git add .\
Commit all files (-a) and add a message (-m)\
git commit -a -m "commit message goes here"\
git remote add origin https://github.com/spawar2/Object-Oriented-Programming-Laboratory.git\
git push origin master\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb1 \
}